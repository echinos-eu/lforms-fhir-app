{"mappings":"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","sources":["node_modules/lforms-updater/source/versionList.json","node_modules/lforms-updater/source/util.js","node_modules/lforms-updater/source/versionUpdates/29.0.0.js","node_modules/lforms-updater/source/versionUpdates/28.0.0.js","node_modules/lforms-updater/source/versionUpdates/26.0.0.js","node_modules/lforms-updater/source/versionUpdates/25.0.0.js","node_modules/lforms-updater/source/versionUpdates/24.0.0.js","node_modules/lforms-updater/source/versionUpdates/23.0.0.js","node_modules/lforms-updater/source/versionUpdates/22.0.0.js","node_modules/lforms-updater/source/updateFns.js","node_modules/lforms-updater/source/index_browser.js","node_modules/lforms-updater/source/index.js"],"sourcesContent":["[\"29.0.0\",\"28.0.0\",\"26.0.0\",\"25.0.0\",\"24.0.0\",\"23.0.0\",\"22.0.0\"]","// Utility functions used by other modules in this package.\n\n'use strict';\n\nconst VERSION_REGEX = /^lformsVersion: (.+)$/;\n\nmodule.exports = {\n  /**\n   *  Returns true if the given parsed JSON is a FHIR resource.\n   */\n  isFHIRResource: function (parsedJSON) {\n    return !!parsedJSON.resourceType;\n  },\n\n\n  /**\n   *  Finds extension arrays in the given structure, and calls the callback\n   *  for each array found, passing it as a parameter.\n   */\n  findExtensions: function (parsedJSON, callback) {\n    if (parsedJSON.extension)\n      callback(parsedJSON.extension);\n    let items = parsedJSON.item || parsedJSON.items; // \"items\" is the LForms format\n    if (items) {\n      for (let i of items)\n        this.findExtensions(i, callback);\n    }\n  },\n\n\n  /**\n   *  Finds the item by searching extension arrays in the given structure, and calls the callback\n   *  for each array found, passing the item as a parameter.\n   */\n  findItemByExtension: function (parsedJSON, callback) {\n    if (parsedJSON.extension)\n      callback(parsedJSON);\n    let items = parsedJSON.item || parsedJSON.items; // \"items\" is the LForms format\n    if (items) {\n      for (let i of items)\n        this.findItemByExtension(i, callback);\n    }\n  },\n\n\n  /**\n   *  Returns true if the first version is less than the second version.\n   *  Assumption: There are always three numeric parts in the version strings,\n   *  separated by periods.\n   * @param left the first version (left of the < operator).  This can be\n   *  undefined or null; in that case the return value is true.\n   * @param right the second version (right of the < operator)\n   */\n  versionLessThan: function (left, right) {\n    let rtn;\n    if (!left)\n      rtn = true; // unversioned case\n    else {\n      let leftParts = left.split('.');\n      let rightParts = right.split('.');\n      for (let i=0; i<3 && rtn === undefined; ++i) {\n        let lp = parseInt(leftParts[i]), rp = parseInt(rightParts[i]);\n        if (lp != rp)\n          rtn = lp < rp\n      }\n      if (rtn === undefined)\n        rtn = false;\n    }\n    return rtn;\n  },\n\n\n  /**\n   *  Returns a FHIR tag display string for a given LForms version string.\n   * @param lformsVersion The LForms SemVer string for which a tag is needed.\n   */\n  makeVersionTag: function (lformsVersion) {\n    return 'lformsVersion: '+lformsVersion;\n  },\n\n\n  /**\n   *  Returns the LForms SemVer version from the given FHIR tag object,\n   *  or null if the given tag string does not indicate an LForms version.\n   * @param tag A FHIR tag object\n   */\n  versionFromTag: function(tag) {\n    let rtn = null;\n    // Currently the version is on the \"code\" attribute, but originally it was\n    // on the \"display\" attribute, so we check both.\n    let versionStr = tag.code || tag.display;\n    let md = versionStr.match(VERSION_REGEX);\n    if (md)\n      rtn = md[1];\n    return rtn;\n  },\n\n\n  /**\n   *  Returns true if there is a LForms tag in the FHIR resource\n   * @param parsedJSON the updated resource\n   */\n  hasLformsTag(parsedJSON) {\n    if (parsedJSON.meta && parsedJSON.meta.tag) {\n      for (const tag of parsedJSON.meta.tag) {\n        if (tag.code && tag.code.match(VERSION_REGEX)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version, the calculatedExpresion URI changed.  This\n  // affects both LForms definitions and Questionnaires.\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON) || parsedJSON.resourceType === 'Questionnaire') {\n    util.findExtensions(parsedJSON, function (extArray) {\n      for (let ext of extArray) {\n        if (ext.url === 'http://hl7.org/fhir/StructureDefinition/questionnaire-launchContext') {\n          ext.url = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-launchContext';\n        }\n      }\n    });\n  }\n  return parsedJSON;\n};\n","'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // If an observationLinkPeriod extension is used we add observationExtract\n  // This affects LForms and versioned Questionnaires\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON) ||\n      (parsedJSON.resourceType === 'Questionnaire' && util.hasLformsTag(parsedJSON))) {\n    util.findExtensions(parsedJSON, function (extArray) {\n      for (const ext of extArray) {\n        // If the observationLinkPeriod is used then add the observationExtract extension too\n        if (ext.url === 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod') {\n          extArray.push({\n            url: 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationExtract',\n            valueBoolean: true\n          });\n          break;\n        }\n      }\n    });\n  }\n  \n  return parsedJSON;\n};\n","'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version new defaults were provided for templateOptions to hide the header\n  // and the form controls. This only affects LForms.\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON)) {\n    if (typeof parsedJSON.templateOptions === 'object') {\n      // If template options were specified we won't override them\n\n      if (parsedJSON.templateOptions.hideFormControls === undefined) {\n        parsedJSON.templateOptions.hideFormControls = false;\n      }\n\n      if (parsedJSON.templateOptions.showFormHeader === undefined) {\n        parsedJSON.templateOptions.showFormHeader = true;\n      }\n\n    } else {\n      // If template options were not specified then add the previous defaults\n      parsedJSON.templateOptions = {\n        hideFormControls: false,\n        showFormHeader: true\n      }\n    }\n  }\n\n  return parsedJSON;\n};\n","'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version, the calculatedExpresion URI changed.  This\n  // affects both LForms definitions and Questionnaires.\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON) || parsedJSON.resourceType === 'Questionnaire') {\n    util.findExtensions(parsedJSON, function (extArray) {\n      for (let ext of extArray) {\n        if (ext.url === \"http://hl7.org/fhir/StructureDefinition/questionnaire-calculatedExpression\")\n          ext.url = \"http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression\";\n      }\n    });\n  }\n  return parsedJSON;\n};\n","'use strict';\n\nconst PATH_DELIMITER = \"/\";\n\n/**\n * Generate linkId from questionCode and replace questionCode in form controls\n * with linkId.\n * @param lfData a LForms form definition data object\n */\nfunction convertCodeToLinkId(lfData) {\n  _addLinkId(lfData.items, '', lfData);\n  _convertFormControls(lfData.items);\n  _removeTempFields(lfData.items)\n}\n\n/**\n * Remove the temporary fields created during the conversion\n * @param items a list of LForms items\n * @private\n */\nfunction _removeTempFields(items) {\n  // for each item on this level\n  for (var i = 0, iLen = items.length; i < iLen; i++) {\n    var item = items[i];\n    delete item._parentItem;\n    delete item._codePath;\n    // process the sub items\n    if (item.items && item.items.length > 0) {\n      _removeTempFields(item.items);\n    }\n  }\n}\n\n/**\n * Generate linkId from questionCode\n * @param items a list of LForms items\n * @param parentItemCodePath the codePath of the parent item\n * @param parentItem the parent item\n * @private\n */\nfunction _addLinkId(items, parentItemCodePath, parentItem) {\n\n  var iLen = items.length, prevSibling = null, itemId = 1;\n\n  // for each item on this level\n  for (var i = 0; i < iLen; i++) {\n    var item = items[i];\n\n    var questionRepeatable = item.questionCardinality && item.questionCardinality.max &&\n        (item.questionCardinality.max === \"*\" || parseInt(item.questionCardinality.max) > 1);\n\n    // id\n    if (questionRepeatable && prevSibling && prevSibling.questionCode === item.questionCode) {\n      itemId += 1;\n    } else {\n      itemId = 1;\n    }\n\n    // codePath as linkId\n    var codePath = parentItemCodePath + PATH_DELIMITER + item.questionCode;\n\n    item._parentItem = parentItem;\n    item._codePath = codePath;\n\n    // linkId for Questionnaire\n    if (!item.linkId) {\n      item.linkId = codePath;\n    }\n    // keep a reference to the previous item for checking repeating items.\n    prevSibling = item;\n\n    // process the sub items\n    if (item.items && item.items.length > 0) {\n      _addLinkId(item.items, codePath, item);\n    }\n  }\n}\n\n\n/**\n * Convert questionCode in all form controls (skip logic, data control, calculation method)\n * to linkId\n * @param items a list of LForms items\n * @private\n */\nfunction _convertFormControls(items) {\n\n  for(var i=0, iLen=items.length; i<iLen; i++) {\n    var item = items[i];\n    // convert code in skip logic to be linkId\n    if (item.skipLogic && item.skipLogic.conditions) {\n      for (var j = 0, jLen = item.skipLogic.conditions.length; j < jLen; j++) {\n        var condition = item.skipLogic.conditions[j];\n        var sourceItem = _findItemsUpwardsAlongAncestorTree(item, condition.source); // source is still a code\n        condition.source = sourceItem.linkId;\n      } // end of conditions loop\n    }\n\n    // convert code in dataControl to be linkId\n    if (item.dataControl) {\n      for (var j= 0, jLen=item.dataControl.length; j<jLen; j++) {\n        var source = item.dataControl[j].source;\n\n        // has a source configuration\n        if (source && (!source.sourceType || source.sourceType === \"INTERNAL\") &&\n            source.sourceItemCode) {\n          // get the source item object\n          var sourceItem = _findItemsUpwardsAlongAncestorTree(item, source.sourceItemCode);\n          if (!sourceItem) {\n            // This is an error in the form definition.  Provide a useful\n            // debugging message.\n            throw new Error(\"Data control for item '\"+item.question+ \"' refers to source item '\"+source.sourceItemCode+\n                \"' which was not found as a sibling, ancestor, or ancestor sibling.\");\n          }\n          source.sourceLinkId = sourceItem.linkId;\n          delete source.sourceItemCode;\n        }\n      }\n    }\n\n    // convert code in calculationMethod to be linkId\n    if (item.calculationMethod && item.calculationMethod.value && Array.isArray(item.calculationMethod.value)) {\n      var newValue = [];\n      for (var j= 0, jLen=item.calculationMethod.value.length; j<jLen; j++) {\n        var questionCode = item.calculationMethod.value[j];\n        var sourceItem = _findItemsUpwardsAlongAncestorTree(item, questionCode);\n        newValue.push(sourceItem.linkId);\n      }\n\n      item.calculationMethod.value = newValue;\n    }\n\n    if (item.items && item.items.length > 0) {\n      _convertFormControls(item.items);\n    }\n  }\n\n}\n\n\n/**\n * Search upwards along the tree structure to find the item with a matching questionCode\n * @param item the item to start with\n * @param questionCode the code of an item\n * @returns {}\n * @private\n */\nfunction _findItemsUpwardsAlongAncestorTree(item, questionCode) {\n  var sourceItem = null;\n\n  // check siblings\n  if (item._parentItem && Array.isArray(item._parentItem.items)) {\n    for (var i= 0, iLen= item._parentItem.items.length; i<iLen; i++) {\n      if (item._parentItem.items[i].questionCode === questionCode) {\n        sourceItem = item._parentItem.items[i];\n        break;\n      }\n    }\n  }\n  // check ancestors and each ancestors siblings\n  if (!sourceItem) {\n    var parentItem = item._parentItem;\n    while (parentItem) {\n      var foundSource = false;\n      // check the ancestor\n      if (parentItem.questionCode === questionCode) {\n        sourceItem = parentItem;\n        foundSource = true;\n      }\n      // check the ancestors siblings\n      else if (parentItem._parentItem && Array.isArray(parentItem._parentItem.items)){\n        var parentSiblings = parentItem._parentItem.items;\n        for (var i= 0, iLen= parentSiblings.length; i<iLen; i++) {\n          if (parentSiblings[i].questionCode === questionCode) {\n            sourceItem = parentSiblings[i];\n            foundSource = true;\n            break;\n          }\n        }\n      }\n      if (foundSource)\n        break;\n\n      parentItem = parentItem._parentItem;\n    }\n  }\n  return sourceItem;\n}\n\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @param parsedJSON either an LForms definition or a resource generated by\n *  LForms.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n\n  let util = require('../util');\n  // if it is LForms form data object\n  if (!util.isFHIRResource(parsedJSON) && parsedJSON.items) {\n    convertCodeToLinkId(parsedJSON);\n  }\n  return parsedJSON;\n};\n","'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @param parsedJSON either an LForms definition or a resource generated by\n *  LForms.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version, the lformsVersion tag changed to have its value on the\n  // \"code\" field rather than the \"display\" field (because the HAPI FHIR server\n  // requires a \"code\" for tags).\n  let util = require('../util');\n  let meta = parsedJSON.meta;\n  if (meta) {\n    let tags = meta.tag;\n    if (tags) {\n      for (let t of tags) {\n        let version = util.versionFromTag(t);\n        if (version) {\n          // Move the version string from \"display\" to \"code\".  The index.js\n          // code will handle updating the version number.\n          if (t.display && !t.code) {\n            t.code = t.display;\n            delete t.display;\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  // In this version the extension in Questionnaire for answer repeats is removed, and replaced with repeats = true.\n  if (parsedJSON.resourceType === 'Questionnaire') {\n    util.findItemByExtension(parsedJSON, function (item) {\n      if (item.extension) {\n        for (let i=0; i< item.extension.length; i++) {\n          let ext = item.extension[i];\n          if (ext.url === \"http://hl7.org/fhir/StructureDefinition/questionnaire-answerRepeats\") {\n            item.repeats = true;\n            item.extension.splice(i, 1);\n            i = i - 1;\n          }\n        }\n      }\n    });\n  }\n\n  return parsedJSON;\n};\n","'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version, the observationLinkPeriod extension changed.  This\n  // affects both LForms definitions and Questionnaires.\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON) || parsedJSON.resourceType === 'Questionnaire') {\n    util.findExtensions(parsedJSON, function (extArray) {\n      for (let ext of extArray) {\n        if (ext.url === \"http://hl7.org/fhir/StructureDefinition/questionnaire-observationLinkPeriod\")\n          ext.url = \"http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod\";\n      }\n    });\n  }\n  return parsedJSON;\n};\n","module.exports = {};\nmodule.exports['29.0.0'] = require('./versionUpdates/29.0.0.js');\nmodule.exports['28.0.0'] = require('./versionUpdates/28.0.0.js');\nmodule.exports['26.0.0'] = require('./versionUpdates/26.0.0.js');\nmodule.exports['25.0.0'] = require('./versionUpdates/25.0.0.js');\nmodule.exports['24.0.0'] = require('./versionUpdates/24.0.0.js');\nmodule.exports['23.0.0'] = require('./versionUpdates/23.0.0.js');\nmodule.exports['22.0.0'] = require('./versionUpdates/22.0.0.js');\n","// To be used for browser-builds.  Defines lformsUpdater on window.\n\n'use strict';\n\nconst updater = require('./index');\nwindow.lformsUpdater = updater;\n","// Updates an LForms form definition or a FHIR resource generated by LForms,\n// to be compatible with the latest LForms version.\n\n'use strict';\n\n/**\n *  A list of all version numbers for which an update step is provided, in order\n *  from highest to lowest version number.\n */\nconst updateVersions_ = require('./versionList');\n\n/**\n *  A hash from an updateVersions_ entry to a function for performing that\n *  update step.  Each function takes the JSON for the resource to be updated.\n */\nconst updateFns_ = require('./updateFns');\n\n/**\n *  Updates an LForms form definition or a FHIR resource generated by LForms,\n *  to be compatible with the latest LForms version.\n * @param parsedJSON the parsed JSON containing the form\n *  definition or FHIR resource to be updated.\n * @param version (optional) the version to update to.  Updates for version\n *  numbers greater than this number will not be run.\n * @return the updated form definition or FHIR resource.\n */\nmodule.exports = {update: function (parsedJSON, version) {\n  let stopVersion = version;\n  let util = require('./util');\n  // Determine the lforms version\n  var isFHIR = util.isFHIRResource(parsedJSON);\n  var lformsVersion;\n  if (isFHIR) {\n    let meta = parsedJSON.meta;\n    if (meta) {\n      let tags = meta.tag;\n      if (tags) {\n        for (let t of tags) {\n          let tagVersion = util.versionFromTag(t);\n          if (tagVersion) {\n            lformsVersion = tagVersion;\n            break;\n          }\n        }\n      }\n    }\n  }\n  else { // an lforms form definition\n    lformsVersion = parsedJSON.lformsVersion;\n  }\n\n  // Determine which update steps need to run.\n  let updateSteps = [];\n  for (let i=0, len=updateVersions_.length, uv; i<len && (uv=updateVersions_[i]) &&\n       util.versionLessThan(lformsVersion, uv); ++i) {\n    if (!stopVersion || !util.versionLessThan(stopVersion, uv)) // stopVersion >= uv\n      updateSteps.push(uv);\n  }\n\n  let latestVersion = updateSteps[0];\n  for (let step of updateSteps.reverse()) // reverse changes the array in place\n    parsedJSON = updateFns_[step](parsedJSON);\n\n  // If we ran any of the updates, update the version tag\n  if (updateSteps.length) {\n    if (isFHIR) {\n      // Update or set the tag\n      let meta = parsedJSON.meta;\n      if (!meta)\n        meta = parsedJSON.meta = {};\n      let tags = meta.tag;\n      if (!tags)\n        tags = meta.tag = [];\n      let versionTag;\n      // for existing tags\n      for (let t of tags) {\n        let version = util.versionFromTag(t);\n        if (version) {\n          versionTag = t;\n          break;\n        }\n      }\n      let versionDisplay = util.makeVersionTag(latestVersion);\n      if (versionTag) {\n        versionTag.code = versionDisplay;\n        delete versionTag.display; // in case it was from the old version tag format\n      }\n      else\n        tags.push({code: versionDisplay});\n    }\n    else\n      parsedJSON.lformsVersion = latestVersion;\n  }\n\n  return parsedJSON;\n}};\n"],"names":["c","e","r","exports","require_versionList","__commonJSMin","module","require_util","VERSION_REGEX","isFHIRResource","parsedJSON","resourceType","findExtensions","callback","extension","items","item","i","this","findItemByExtension","versionLessThan","left","right","rtn","leftParts","split","rightParts","lp","parseInt","rp","makeVersionTag","lformsVersion","versionFromTag","tag","md","code","display","match","hasLformsTag","meta","require__","util","h","extArray","ext","url","push","valueBoolean","templateOptions","hideFormControls","showFormHeader","PATH_DELIMITER","convertCodeToLinkId","lfData","_addLinkId","_convertFormControls","_removeTempFields","iLen","length","_parentItem","_codePath","parentItemCodePath","parentItem","prevSibling","questionCardinality","max","questionCode","codePath","linkId","skipLogic","conditions","j","jLen","condition","sourceItem","_findItemsUpwardsAlongAncestorTree","source","dataControl","sourceType","sourceItemCode","Error","question","sourceLinkId","calculationMethod","value","Array","isArray","newValue","foundSource","parentSiblings","tags","t","repeats","splice","require_updateFns","y","k","F","_","w","A","M","updater","updateVersions_","x","updateFns_","P","update","version","stopVersion","isFHIR","tagVersion","updateSteps","uv","len","latestVersion","step","reverse","versionTag","versionDisplay","window","lformsUpdater"],"version":3,"file":"index.f69a69d1.js.map"}